/*
 * MDES for Merchants
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br> __Authentication__ Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br> 1 . A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br>  __Encryption__<br>  All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br> __Additional Encryption of Sensitive Data__ In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * OpenAPI spec version: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.veritran.token_services.digital_enablement.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import net.veritran.token_services.digital_enablement.model.FundingAccountInfoEncryptedPayload;

/**
 * FundingAccountInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-08-20T14:45:14.955-03:00")

public class FundingAccountInfo {
  @JsonProperty("panUniqueReference")
  private String panUniqueReference = null;

  @JsonProperty("tokenUniqueReference")
  private String tokenUniqueReference = null;

  @JsonProperty("pushAccountReceipt")
  private String pushAccountReceipt = null;

  @JsonProperty("encryptedPayload")
  private FundingAccountInfoEncryptedPayload encryptedPayload = null;

  public FundingAccountInfo panUniqueReference(String panUniqueReference) {
    this.panUniqueReference = panUniqueReference;
    return this;
  }

   /**
   *  __(CONDITIONAL)__ &lt;br&gt;  For repeat digitizations, the unique reference allocated to the Primary Account Number. When supplied, the tokenUniqueReferenceForPanInfo, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData. Only allowed if tokenUniqueReference and pushAccountReceipt are not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ 
   * @return panUniqueReference
  **/
  @ApiModelProperty(value = " __(CONDITIONAL)__ <br>  For repeat digitizations, the unique reference allocated to the Primary Account Number. When supplied, the tokenUniqueReferenceForPanInfo, accountNumber, expiryMonth and expiryYear must be omitted from CardInfoData. Only allowed if tokenUniqueReference and pushAccountReceipt are not present and encrypted data does not contain the account information. <br> __Max Length:64__ ")
  public String getPanUniqueReference() {
    return panUniqueReference;
  }

  public void setPanUniqueReference(String panUniqueReference) {
    this.panUniqueReference = panUniqueReference;
  }

  public FundingAccountInfo tokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
    return this;
  }

   /**
   *  __(CONDITIONAL)__&lt;br&gt;  A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.  For repeat digitizations, the unique reference allocated to the token will be used to retrieve the financial account information. When supplied, the account information is omitted from FundingAccountData. Only allowed if panUniqueReference and pushAccountReceipt are not present and encrypted data does not contain the account information. &lt;br&gt; __Max Length:64__ 
   * @return tokenUniqueReference
  **/
  @ApiModelProperty(value = " __(CONDITIONAL)__<br>  A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.  For repeat digitizations, the unique reference allocated to the token will be used to retrieve the financial account information. When supplied, the account information is omitted from FundingAccountData. Only allowed if panUniqueReference and pushAccountReceipt are not present and encrypted data does not contain the account information. <br> __Max Length:64__ ")
  public String getTokenUniqueReference() {
    return tokenUniqueReference;
  }

  public void setTokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
  }

  public FundingAccountInfo pushAccountReceipt(String pushAccountReceipt) {
    this.pushAccountReceipt = pushAccountReceipt;
    return this;
  }

   /**
   * __(CONDITIONAL)__&lt;br&gt; The push account receipt is supplied by the Issuer to the Merchant during a push provisioning operation. The pushAccountReceipt is then submitted by the merchant in the tokenize request and will be used by MDES to retrieve the associated funding account information. Only allowed if panUniqueReference and tokenUniqueReference are not present and encrypted data does not contain the funding account information. Refer to the &lt;a href&#x3D;\&quot;https://developer.mastercard.com/page/push-provisioning-merchant\&quot;&gt;Push Provisioning Use Case Guide &lt;/a&gt;  for more information about pushAccountReceipt.  __Max Length:64__ 
   * @return pushAccountReceipt
  **/
  @ApiModelProperty(value = "__(CONDITIONAL)__<br> The push account receipt is supplied by the Issuer to the Merchant during a push provisioning operation. The pushAccountReceipt is then submitted by the merchant in the tokenize request and will be used by MDES to retrieve the associated funding account information. Only allowed if panUniqueReference and tokenUniqueReference are not present and encrypted data does not contain the funding account information. Refer to the <a href=\"https://developer.mastercard.com/page/push-provisioning-merchant\">Push Provisioning Use Case Guide </a>  for more information about pushAccountReceipt.  __Max Length:64__ ")
  public String getPushAccountReceipt() {
    return pushAccountReceipt;
  }

  public void setPushAccountReceipt(String pushAccountReceipt) {
    this.pushAccountReceipt = pushAccountReceipt;
  }

  public FundingAccountInfo encryptedPayload(FundingAccountInfoEncryptedPayload encryptedPayload) {
    this.encryptedPayload = encryptedPayload;
    return this;
  }

   /**
   * __(CONDITIONAL)__  
   * @return encryptedPayload
  **/
  @ApiModelProperty(value = "__(CONDITIONAL)__  ")
  public FundingAccountInfoEncryptedPayload getEncryptedPayload() {
    return encryptedPayload;
  }

  public void setEncryptedPayload(FundingAccountInfoEncryptedPayload encryptedPayload) {
    this.encryptedPayload = encryptedPayload;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FundingAccountInfo fundingAccountInfo = (FundingAccountInfo) o;
    return Objects.equals(this.panUniqueReference, fundingAccountInfo.panUniqueReference) &&
        Objects.equals(this.tokenUniqueReference, fundingAccountInfo.tokenUniqueReference) &&
        Objects.equals(this.pushAccountReceipt, fundingAccountInfo.pushAccountReceipt) &&
        Objects.equals(this.encryptedPayload, fundingAccountInfo.encryptedPayload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(panUniqueReference, tokenUniqueReference, pushAccountReceipt, encryptedPayload);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FundingAccountInfo {\n");
    
    sb.append("    panUniqueReference: ").append(toIndentedString(panUniqueReference)).append("\n");
    sb.append("    tokenUniqueReference: ").append(toIndentedString(tokenUniqueReference)).append("\n");
    sb.append("    pushAccountReceipt: ").append(toIndentedString(pushAccountReceipt)).append("\n");
    sb.append("    encryptedPayload: ").append(toIndentedString(encryptedPayload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

